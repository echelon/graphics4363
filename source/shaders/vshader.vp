#version 150

in vec4 vPosition;		// This will be referenced in your OpenGL program!!
in vec3 vNormal;
in vec3 vTexture;		// XXX: I think this is correct.

in vec2 vTextureCoord;		// In from OpenGL
out vec2 texCoord;		// Going out to the shader

//uniform vec4 vColor;	// Coming in from your OpenGL program
//in vec4 vColor; 		// TODO: TEMP
//attribute vec3 vNormal;	// The normal of the vertex

varying vec4 color;		// Going to (and defined in) your fragment shader

// Remember, uniforms are the same for a vertices.
uniform mat4 p;			// This is perpsective matrix
uniform mat4 mv;		// This is the model-view matrix

// Positions of lighting
uniform vec3 lightPos;
uniform vec3 viewPos;

// Colors
uniform vec4 diffuseColor;
uniform vec4 sunColor;

void main()
{
	// Positioning
	gl_Position = p * mv * vPosition;

	vec3 vp = vec3(mv*vPosition);

	// Lighting calculations
	vec3 N = -normalize(vNormal);
	vec3 L = normalize(lightPos.xyz  - normalize(vp));
	vec3 V = normalize(viewPos.xyz);
	vec3 H = V + L;

	vec4 dc = sunColor * max(dot(N, L), 0.2);


	//vec4 sc = max(pow(dot(N, H), .5), 0.0f) * sunColor;
	//vec4 sc = dot(H, N) * sunColor;
	vec4 sc = max(0.0, dot(N, L)) * sunColor;

	color = dc;

	// Texture coordinates
	texCoord = vTextureCoord;
	//texCoord = vec2(gl_MultiTexCoord0);
}
