#version 150

in vec4 vPosition;		// This will be referenced in your OpenGL program!!
in vec3 vNormal;
in vec3 vTexture;		// XXX: I think this is correct.

in vec2 vTextureCoord;		// In from OpenGL
out vec2 texCoord;		// Going out to the shader

//uniform vec4 vColor;	// Coming in from your OpenGL program
//in vec4 vColor; 		// TODO: TEMP
//attribute vec3 vNormal;	// The normal of the vertex

varying vec4 color;		// Going to (and defined in) your fragment shader

// Remember, uniforms are the same for a vertices.
uniform mat4 p;			// This is perpsective matrix
uniform mat4 mv;		// This is the model-view matrix

// Lighting. It works!
uniform vec3 lightPos;
uniform vec4 diffuseColor;

void main()
{
	// Positioning
	gl_Position = p * mv * vPosition;

	// Lighting calculations
	vec3 L = normalize(lightPos.xyz);
	vec3 N = normalize(vNormal);
	color = diffuseColor * max(0.0f, dot(N, L));

	// Texture coordinates
	texCoord = vTextureCoord;
	//texCoord = vec2(gl_MultiTexCoord0);
}
